folds = 10;
cv = cvpartition(totalSeq,'kfold',folds);
cMat1=cell(1,folds);
cMat2=cell(1,folds);
cMat3=cell(1,folds);
cMat4=cell(1,folds);
cMat5=cell(1,folds);
cMat6=cell(1,folds);
cn=unique(alabels);
n = length(cn);

parfor i = 1:folds
    AllTestInd = test(cv,i);
    testInd = find(AllTestInd);
    AllTrainInd = training(cv,i);
    trainInd = find(AllTrainInd);
    trainSet = disMat(trainInd,trainInd);
    testSet = disMat(testInd,trainInd);
    
    %linear-discriminant
    c1 = fitcdiscr(...
    trainSet, ...
    alabels(trainInd), ...
    'DiscrimType', 'linear', ...
    'Gamma', 0, ...
    'FillCoeffs', 'off', ...
    'ClassNames', cn);
    plabel1 = predict(c1,testSet);
    cMat1{i} =  checkDimension(confusionmat(alabels(testInd),plabel1),alabels(testInd),plabel1, n);
   
    %linear-svm
    if(n==2)
        c2 = fitcsvm(...
        trainSet, ...
        alabels(trainInd), ...
        'KernelFunction', 'linear', ...
        'PolynomialOrder', [], ...
        'KernelScale', 'auto', ...
        'BoxConstraint', 1, ...
        'Standardize', true, ...
        'ClassNames', cn);
        plabel2 = predict(c2,testSet);
        cMat2{i} =  checkDimension(confusionmat(alabels(testInd),plabel2),alabels(testInd),plabel2, n);
    else
        template = templateSVM(...
        'KernelFunction', 'linear', ...
        'PolynomialOrder', [], ...
        'KernelScale', 'auto', ...
        'BoxConstraint', 1, ...
        'Standardize', true);
        c2 = fitcecoc(...
        trainSet, ...
        alabels(trainInd), ...
        'Learners', template, ...
        'Coding', 'onevsone', ...
        'ClassNames', cn);
        plabel2 = predict(c2,testSet);
        cMat2{i} =  checkDimension(confusionmat(alabels(testInd),plabel2),alabels(testInd),plabel2, n);
    end
    
    %quad-svm
    if(cn==2)
        c3 = fitcsvm(...
        trainSet, ...
        alabels(trainInd), ...
        'KernelFunction', 'polynomial', ...
        'PolynomialOrder', 2, ...
        'KernelScale', 'auto', ...
        'BoxConstraint', 1, ...
        'Standardize', true, ...
        'ClassNames', cn);
        plabel3 = predict(c3,testSet);
        cMat3{i} =  checkDimension(confusionmat(alabels(testInd),plabel3),alabels(testInd),plabel3, n);
    else
        template = templateSVM(...
        'KernelFunction', 'polynomial', ...
        'PolynomialOrder', 2, ...
        'KernelScale', 'auto', ...
        'BoxConstraint', 1, ...
        'Standardize', true);
        c3 = fitcecoc(...
        trainSet, ...
        alabels(trainInd), ...
        'Learners', template, ...
        'Coding', 'onevsone', ...
        'ClassNames', cn);
        plabel3 = predict(c3,testSet);
        cMat3{i} =  checkDimension(confusionmat(alabels(testInd),plabel3),alabels(testInd),plabel3, n);
    end
    %fine-knn
    %classModel = fitcknn(trainSet,alabels(trainInd));
    c4 = fitcknn(...
    trainSet, ...
    alabels(trainInd), ...
    'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', 1, ...
    'DistanceWeight', 'Equal', ...
    'Standardize', true, ...
    'ClassNames', cn);
    plabel4 = predict(c4,testSet);
    cMat4{i} =  checkDimension(confusionmat(alabels(testInd),plabel4),alabels(testInd),plabel4, n);

    %subspace-discriminant
    subspaceDimension = max(1, min(74, length(trainSet) - 1));
    c5 = fitcensemble(...
    trainSet, ...
    alabels(trainInd), ...
    'Method', 'Subspace', ...
    'NumLearningCycles', 30, ...
    'Learners', 'discriminant', ...
    'NPredToSample', subspaceDimension, ...
    'ClassNames', cn);
    plabel5 = predict(c5,testSet);
    cMat5{i} =  checkDimension(confusionmat(alabels(testInd),plabel5),alabels(testInd),plabel5, n);

    %subspace knn
    subspaceDimension = max(1, min(74, length(trainSet) - 1));
    c6 = fitcensemble(...
    trainSet, ...
    alabels(trainInd), ...
    'Method', 'Subspace', ...
    'NumLearningCycles', 30, ...
    'Learners', 'knn', ...
    'NPredToSample', subspaceDimension, ...
    'ClassNames', cn);
    plabel6 = predict(c6,testSet);
    cMat6{i} =  checkDimension(confusionmat(alabels(testInd),plabel6),alabels(testInd),plabel6, n);
    

%     plabel = predict(classModel,testSet);
%     cMat{i} =  confusionmat(alabels(testInd),plabel);
end

cMat{1}=cMat1;
cMat{2}=cMat2;
cMat{3}=cMat3;
cMat{4}=cMat4;
cMat{5}=cMat5;
cMat{6}=cMat6;
accuracy=cell(1,length(cMat));
% cMatrix = 0;
% for k = 1:folds
%     cMatrix = cMatrix+cMat{k};
% end
% 
% accuracy = (trace(cMatrix)/totalSeq)*100;
for i=1:length(accuracy)
    cm = cMat{i};
    cMatrix = 0;
    for k = 1:folds
     cMatrix = cMatrix+cm{k};
    end
    accuracy{i} = round((trace(cMatrix)/totalSeq)*100,1);
    
end
accuracy
avg_acc = round(sum([accuracy{:}])/length(accuracy),1)

% test(cv,1);
% testInd = find(allInd);
% training(c,1)
% indList = randperm(totalSeq);
% testNoOfSeq = floor(totalSeq/10);
% sInd = totalSeq-testNoOfSeq+1;
% s1Ind = totalSeq-testNoOfSeq;
% 
% trainInd = indList(1:s1Ind);
% trainInd = sort(trainInd);
% 
% testInd = indList(sInd:totalSeq);
% testInd = sort(testInd);
% 
% %training seq
% trainSet = disMat(trainInd,trainInd);
% 
% %testing seq
% testSet = disMat(testInd,trainInd);


% classificationKNN = fitcknn(trainSet,a(trainInd));
% label = predict(classificationKNN,testSet);
% cMat = confusionmat(a(testInd),label);


